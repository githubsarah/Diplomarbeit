package com.commend.diplomarbeit.room;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.source.InvalidConfigurationPropertyValueException;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping(path = "/room") // This means URL's start with /room (after Application path)
public class RoomController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private RoomRepository roomRepository;


    @GetMapping("") // Zeigt alle Räume an
    public List<Room> getAllRooms() {
        return roomRepository.findAll();
    }

    @PostMapping("") // Map ONLY POST Requests
    public Room createRoom(@RequestBody Room room) {
        return roomRepository.save(room);
    }

    // Mit diesem PutMapping können Änderungen an den Raumdaten vorgenommen werden
    @PutMapping("/{id}")
    public ResponseEntity<Room> updateRoom(@PathVariable("id") int id, @RequestBody Room room) throws InvalidConfigurationPropertyValueException {

        Room r = roomRepository.findById(id).orElseThrow(() -> new InvalidConfigurationPropertyValueException("id", id, "Not found"));

        r.setNumber(room.getNumber());
        r.setMaxOccupancy(room.getMaxOccupancy());

        final Room updateRoom = roomRepository.save(r);
        return ResponseEntity.ok(updateRoom);

    }


    @GetMapping("/{id}")
    public ResponseEntity<Room> getRoomById(@PathVariable("id") int id) throws InvalidConfigurationPropertyValueException {
        Room r = roomRepository.findById(id).orElseThrow(() -> new InvalidConfigurationPropertyValueException("id", id, "Not found"));

        return ResponseEntity.ok().body(r);
    }

    // Hier werden die Daten des Raumes mittels Zugriff per Raum ID gelöscht
    @DeleteMapping("/{id}")
    public String deleteRoom(@PathVariable("id") int id) {
        roomRepository.deleteById(id);
        return "Deleted";
    }

    // Funktioniert nichts

    @GetMapping("/patient/{patient_id}")
    public Room getRoomByPatientId(@PathVariable("patient_id") int id) {
        return roomRepository.findByPatientId(id);
    }



   /*@PostMapping("/{id}/patient")
    public ResponseEntity<Room> updateRoom(@PathVariable("id") int id, @RequestBody Room room) throws InvalidConfigurationPropertyValueException {

        Room r = roomRepository.findById(id).orElseThrow(() -> new InvalidConfigurationPropertyValueException("id", id, "Not found"));

        if(r.maxOccupancy())

        r.setNumber(room.getNumber());
        r.setMaxOccupancy(room.getMaxOccupancy());
        patient.createPatient();

        final Room updateRoom = roomRepository.save(r);
        return ResponseEntity.ok(updateRoom);

    } */

    @DeleteMapping("/{id}/patient")
    public String deletePatientByRoomId(@PathVariable("id") int id) {
        roomRepository.deleteById(id);
        return "Deleted";
    }






}
