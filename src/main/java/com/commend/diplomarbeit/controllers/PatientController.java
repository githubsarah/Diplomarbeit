package com.commend.diplomarbeit.controllers;

import com.commend.diplomarbeit.models.Patient;
import com.commend.diplomarbeit.models.PatientRepository;
import com.commend.diplomarbeit.models.Room;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.source.InvalidConfigurationPropertyValueException;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;


@RestController
@RequestMapping("/patient") // This means URL's start with /room (after Application path)
public class PatientController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private PatientRepository patientRepository;

    @GetMapping("") // Zeigt alle RÃ¤ume an
    public Iterable<Patient> getAllPatients() {
        return patientRepository.findAll();
    }

    @PostMapping("") // Map ONLY POST Requests
    public Patient createPatient(@RequestParam String fn, @RequestParam String ln, @RequestParam String content){
        Patient p = new Patient();
        p.setFn(fn);
        p.setLn(ln);
        p.setContent(content);
        patientRepository.save(p);
        return p;
    }

    @PutMapping("/{id}")
    public ResponseEntity<Patient> updatePatient(@PathVariable("id") int id, @RequestBody Patient patient) throws InvalidConfigurationPropertyValueException {

        Patient p = patientRepository.findById(id).orElseThrow(() -> new InvalidConfigurationPropertyValueException("id", id, "Not found"));

        p.setFn(patient.getFn());
        p.setLn(patient.getLn());
        p.setContent(patient.getContent());

        final Patient updatePatient= patientRepository.save(p);
        return ResponseEntity.ok(updatePatient);

    }

    @GetMapping("/{id}")
    public ResponseEntity<Patient> getRoomById(@PathVariable("id") int id) throws InvalidConfigurationPropertyValueException {
        Patient p = patientRepository.findById(id).orElseThrow(() -> new InvalidConfigurationPropertyValueException("id", id, "Not found"));

        return ResponseEntity.ok().body(p);
    }

    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/{id}"
    )
    public String deletePatient(@PathVariable("id") int id){
        patientRepository.deleteById(id);

        return "Deleted";
    }




}


